generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  //url      = env("DATABASE_URL")
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum Role {
  ADMIN
  ACCOUNTANT
  REVIEWER
}

enum AccountType {
  CLIENT
  SUPPLIER
  ASSET
}

model User {
  id             String          @id @default(uuid())
  name           String
  role           Role
  phone          String
  email          String          @unique
  password       String
  passwordResets PasswordReset[]
}

model PasswordReset {
  id        String   @id @default(uuid())
  userId    String
  token     String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId], name: "user_id_idx")
}

model Category {
  id            Int        @id @default(autoincrement())
  name          String
  number        Int        @unique
  status        Boolean    @default(false)
  parentId      Int?
  parent        Category?  @relation("CategorySubcategories", fields: [parentId], references: [id])
  subCategories Category[] @relation("CategorySubcategories")
}

model Account {
  id                   String        @id @default(uuid())
  type                 AccountType
  code                 Int
  name                 String
  email                String        @unique
  description          String?
  status               String?       @default("")
  sentTransactions     Transaction[] @relation("SentTransactions")
  receivedTransactions Transaction[] @relation("ReceivedTransactions")
}

model Transaction {
  id            String   @id @default(uuid())
  amount        Float
  description   String
  fromAccountId String
  toAccountId   String
  fromAccount   Account  @relation("SentTransactions", fields: [fromAccountId], references: [id], onDelete: Cascade)
  toAccount     Account  @relation("ReceivedTransactions", fields: [toAccountId], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now())
}
